<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mark's space</title><link href="https://kmarc.github.io/" rel="alternate"></link><link href="https://kmarc.github.io/feeds/all.atom.xml" rel="self"></link><id>https://kmarc.github.io/</id><updated>2020-05-23T00:00:00+02:00</updated><entry><title>Automated environment setup with direnv</title><link href="https://kmarc.github.io/posts/2020-05-23-automated-environment-setup.html" rel="alternate"></link><published>2020-05-23T00:00:00+02:00</published><updated>2020-05-23T00:00:00+02:00</updated><author><name>Mark Korondi</name></author><id>tag:kmarc.github.io,2020-05-23:/posts/2020-05-23-automated-environment-setup.html</id><summary type="html">&lt;p&gt;Config  files are  the past!  At least  for  server-side application  deployments. In  the docker  /
kubernetes world, where applications are deployed into ephemeral containers, we usually do not want
to bother mounting files into the containers, keeping them in sync across microservices, etc. In
kubernetes, especially when using the &lt;a href="https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/"&gt;sidecar pattern …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Config  files are  the past!  At least  for  server-side application  deployments. In  the docker  /
kubernetes world, where applications are deployed into ephemeral containers, we usually do not want
to bother mounting files into the containers, keeping them in sync across microservices, etc. In
kubernetes, especially when using the &lt;a href="https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/"&gt;sidecar pattern&lt;/a&gt;, a container is executed with a lot of
environment variables conveniently set up.&lt;/p&gt;
&lt;p&gt;Wanna bet? Check a simple app on kubernetes, the &lt;a href="https://github.com/kubernetes/dashboard" title="https://github.com/kubernetes/dashboard"&gt;dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Make sure you have a kubernetes env to work on&lt;/span&gt;
$ minikube start

&lt;span class="c1"&gt;# Deploy kubernetes-dashboard&lt;/span&gt;
$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml

&lt;span class="c1"&gt;# Run a temporary pod and check the number of automatically exported KUBERNETES_ variables&lt;/span&gt;
$ kubectl -n kubernetes-dashboard run --rm -ti --image&lt;span class="o"&gt;=&lt;/span&gt;alpine temp
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep KUBERNETES_ &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="c1"&gt;#    15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just to make sure, you can check that the &lt;a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml"&gt;deployment descriptor&lt;/a&gt; does not explicitly export any
of these variables.&lt;/p&gt;
&lt;p&gt;Another example could be almost any of the docker images on docker hub. Check &lt;a href="https://hub.docker.com/_/mysql/" title="https://hub.docker.com/_/mysql/"&gt;MySQL&lt;/a&gt;; many of
the basics (that usually are environment dependent) are configurable via &lt;code&gt;MYSQL_&lt;/code&gt; env vars.&lt;/p&gt;
&lt;h2&gt;Okay but what's the fuss with env vars anyway?&lt;/h2&gt;
&lt;p&gt;Nothing. You easily &lt;code&gt;export MY_VAR="42"&lt;/code&gt; and &lt;code&gt;os.environ.get('MY_VAR')&lt;/code&gt; in python
or &lt;code&gt;os.Getenv("MY_VAR")&lt;/code&gt; in go. This is clear.&lt;/p&gt;
&lt;p&gt;But now we talk about &lt;strong&gt;a lot&lt;/strong&gt; of our configuration variables, URL endpoints of the microservices'
dependencies, switches that normally we add at runtime, and so on. Even a simple django application's
&lt;code&gt;settings.py&lt;/code&gt; would explode over time with all the environment variables. It's easy then. Let's use
a different settings file in production than in testing, which in turn would be different than on
our development machine.&lt;/p&gt;
&lt;p&gt;In the DevOps world, you do not want to have separate setting files&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Industry best practice is
to use the same docker image in all the environments and "configure" the application through
environment variables.&lt;/p&gt;
&lt;p&gt;The question is...&lt;/p&gt;
&lt;h2&gt;How to keep track of environment variables&lt;/h2&gt;
&lt;p&gt;I used to &lt;code&gt;source .env&lt;/code&gt; whenever I &lt;code&gt;cd&lt;/code&gt; into the root directory of my project. As long as you
remember to do this, you are fine. Oh, and you switch directories, you probably want to unload these
variables, right?&lt;/p&gt;
&lt;p&gt;The answer to the problem of always forgetting to do so is &lt;a href="https://direnv.net/" title="https://direnv.net/"&gt;direnv&lt;/a&gt;. Direnv loads all your
environment variables when you &lt;code&gt;cd&lt;/code&gt; into a directory, and unloads them when you leave.&lt;/p&gt;
&lt;p&gt;It requires a one-time setup, and then you just need to get comfortable setting up your project
by simply creating a &lt;code&gt;.envrc&lt;/code&gt; file where you can define your environment variables. Beware, once you
set this workflow up, it's becoming so convenient that you will miss it wherever you are &lt;em&gt;not&lt;/em&gt;
allowed to install direnv...&lt;/p&gt;
&lt;h2&gt;Show me an example!&lt;/h2&gt;
&lt;p&gt;Here you are. This works on Arch linux and bash, you might want to check the official documentation
for other operating systems and shells.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Install direnv from AUR.&lt;/span&gt;
$ yay -S direnv

&lt;span class="c1"&gt;# Make sure direnv hooks are loaded.&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(direnv hook bash)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reload / open a new shell now!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create and enter a project&lt;/span&gt;
$ mkdir my-project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; !$

&lt;span class="c1"&gt;# Create your first .envrc&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export MY_VAR=42&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .envrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You got an  error message - direnv is blocked  in this directory, so it won't  load any arbitrary rc
files. Allow it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ direnv allow
&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="c1"&gt;#   direnv: loading my-project/.envrc&lt;/span&gt;
&lt;span class="c1"&gt;#   direnv: export +MY_VAR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it. as you can see, direnv took over and added (+) the MY_VAR variable to the
environment. You can check it yourself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep MY_VAR
&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="c1"&gt;#   declare -x MY_VAR=&amp;quot;42&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now the automation magic comes: leave the &lt;code&gt;my-project&lt;/code&gt; directory, and then come back to it, and
observe what happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="c1"&gt;#   direnv: unloading&lt;/span&gt;
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep MY_VAR
&lt;span class="c1"&gt;# No output, since MY_VAR is not defined anymore&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; -
&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="c1"&gt;#   direnv: loading my-project/.envrc&lt;/span&gt;
&lt;span class="c1"&gt;#   direnv: export +MY_VAR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Play around&lt;/h2&gt;
&lt;p&gt;Direnv is much more than just exporting env variables. It can bootstrap your python virtualenv,
select your node.js version, initialize PHP, Haskell, Go, and any many other environments. No matter
what language/ecosystem you are working with, most probably you go covered - check the &lt;a href="https://github.com/direnv/direnv/wiki" title="https://github.com/direnv/direnv/wiki"&gt;wiki&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Or for that matter, you do not want &lt;strong&gt;any&lt;/strong&gt; files to be different across environments&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="blog"></category><category term="kubernetes"></category><category term="shell"></category><category term="direnv"></category></entry><entry><title>My DevOps focused Python "IDE" (part I)</title><link href="https://kmarc.github.io/posts/2020-02-23-python-ide.html" rel="alternate"></link><published>2020-02-23T00:00:00+01:00</published><updated>2020-02-23T00:00:00+01:00</updated><author><name>Mark Korondi</name></author><id>tag:kmarc.github.io,2020-02-23:/posts/2020-02-23-python-ide.html</id><summary type="html">&lt;p&gt;As from January 2020 I started a  new job at &lt;a href="http://k-lab.ch/en/home"&gt;Knowledge Lab&lt;/a&gt;, I again faced
the challenge of  how we could somehow  standardize tooling across team members  with a DevOps-first
approach, focusing on proper CI/CD infrastructure, code quality and automation wherever we can.&lt;/p&gt;
&lt;p&gt;This post would be way too …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As from January 2020 I started a  new job at &lt;a href="http://k-lab.ch/en/home"&gt;Knowledge Lab&lt;/a&gt;, I again faced
the challenge of  how we could somehow  standardize tooling across team members  with a DevOps-first
approach, focusing on proper CI/CD infrastructure, code quality and automation wherever we can.&lt;/p&gt;
&lt;p&gt;This post would be way too long if I covered everything here, thus the "part I" in the title.&lt;/p&gt;
&lt;h2&gt;What's DevOps-first anyway?&lt;/h2&gt;
&lt;p&gt;Probably  the   reader  is   already  familiar   with  &lt;a href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/" title="The Joel Test: 12 Steps to Better Code"&gt;the   Joel  test&lt;/a&gt;,   the  &lt;a href="https://sites.google.com/a/jezhumble.net/devops-manifesto/" title="DevOps Manifesto"&gt;DevOps
Manifesto&lt;/a&gt;,  &lt;a href="https://12factor.net/" title="The Twelve factor app"&gt;The Twelve-Factor  App&lt;/a&gt; and  a million  random Medium
article that tells them how  to "do software" and how not to. These  are good resources, however, to
me all this DevOps hype boils down to one core principle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automate. Everything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As always, &lt;em&gt;everything&lt;/em&gt; means a good 80-90% of... those things. Like... &lt;a href="https://stackoverflow.com/questions/90002/what-is-a-reasonable-code-coverage-for-unit-tests-and-why"&gt;Code coverage&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What does it have to do with my IDE?&lt;/h2&gt;
&lt;p&gt;I saw way  too many people spending half their  lifetimes clicking around in PyCharm and  VS Code. I
would do the same: it's impossible to remember  all the obscure, random keyboard shortcuts. The only
reason &lt;kbd&gt;Ctrl&lt;/kbd&gt;-&lt;kbd&gt;V&lt;/kbd&gt;  stands for "paste" is  that &lt;kbd&gt;V&lt;/kbd&gt; happens to  be next to
&lt;kbd&gt;C&lt;/kbd&gt; on the keyboard &lt;sup id="fnref:querty"&gt;&lt;a class="footnote-ref" href="#fn:querty"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The other problem is that sitting in front of  a slow-but-fancy IDE makes the programmer feel like a
pro, whereas  dozens of (pre-configured) plugins  are taking care  of the heavy work  of formatting,
linting, compiling, running  and testing&lt;sup id="fnref:devops"&gt;&lt;a class="footnote-ref" href="#fn:devops"&gt;2&lt;/a&gt;&lt;/sup&gt; the code.&lt;/p&gt;
&lt;p&gt;Guess  what,  these   actions  are  &lt;em&gt;exactly&lt;/em&gt;  what   we  want  to  have  in   our  CI/CD  pipeline,
eventually. Thankfully CI/CD pipelines don't  build upon memory hog &lt;a href="https://stackoverflow.com/search?q=intellij+memory" title="Random stackoverflow questions regarding IntelliJ's memory consumption"&gt;IntelliJ&lt;/a&gt;s and
&lt;a href="https://www.reddit.com/r/vscode/comments/c583zy/how_can_i_deal_with_the_massive_ram_usage_of/" title="I like the answer: `Buy more RAM`"&gt;VSCode&lt;/a&gt;s but the almost &lt;a href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V6"&gt;50-year-old unix shells&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Learn you a shell for greater good!&lt;/h2&gt;
&lt;p&gt;There are a million resources  to learn &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt; from. This article is not one  of those. If you are
comfortable with &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;, know what &lt;code&gt;$PATH&lt;/code&gt; is, you are good to go for now.&lt;/p&gt;
&lt;p&gt;I'm going to show my setup in a couple of steps and then elaborate on each part with a bit of focus
on the newcomer. When I develop python et al, these are my requirements. Pick some of these you are
comfortable with and read on!&lt;/p&gt;
&lt;p&gt;&lt;img class="image-process-screenshot" alt="My IDE" src="https://kmarc.github.io/pictures/python-ide.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Automated environment setup&lt;/strong&gt;;&lt;br&gt;
   I go to the project folder and the environment automatically set up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code &amp;amp; schema completion&lt;/strong&gt;;&lt;br&gt;
   While editing source code / deployment descriptors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated compiler, linter runs&lt;/strong&gt;;&lt;br&gt;
   Upon editing / saving source code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated test case runs&lt;/strong&gt;;&lt;br&gt;
   Upon editing test cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated pre-commit checks for code QA&lt;/strong&gt;;
   I  want to  run  the  &lt;em&gt;same&lt;/em&gt; checks  locally  as  what's going  to  run on  the  gating  ci /  cd
   infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation generator&lt;/strong&gt;; 
   What's displayed on git(Hub|Lab), I should be able to check rendered locally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated packaging&lt;/strong&gt;;&lt;br&gt;
   Again, I want to run the &lt;em&gt;same&lt;/em&gt; packaging procedure as what's on the ci/cd pipelint&lt;/li&gt;
&lt;li&gt;Extra: &lt;strong&gt;Entirely mouse free&lt;/strong&gt;;&lt;br&gt;
   Mouse slows you down: has only 3 buttons, requires 2D free cursor positioning, causes RSI.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, these involve a lot of (one-time) manual configuration; setting up the linters, code
coverage, commit hooks, environment variables. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is it for now - stay tuned for the second part!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:querty"&gt;
&lt;p&gt;On a &lt;strong&gt;QUERTY&lt;/strong&gt; keyboard, anyways...&amp;#160;&lt;a class="footnote-backref" href="#fnref:querty" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:devops"&gt;
&lt;p&gt;... and analyzing code coverage, and dockerizing, and packaging, and signing, and
  integration testing, and... and...&amp;#160;&lt;a class="footnote-backref" href="#fnref:devops" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="blog"></category><category term="programming"></category><category term="vim"></category><category term="tmux"></category><category term="python"></category></entry><entry><title>Switching to OpenStreetMap from Google Maps</title><link href="https://kmarc.github.io/posts/2019-12-25-switching-to-osm-from-gmaps.html" rel="alternate"></link><published>2019-12-25T00:00:00+01:00</published><updated>2019-12-25T00:00:00+01:00</updated><author><name>Mark Korondi</name></author><id>tag:kmarc.github.io,2019-12-25:/posts/2019-12-25-switching-to-osm-from-gmaps.html</id><summary type="html">&lt;p&gt;I have been going on with my "degooglifying" efforts for a while now, however, Google Maps is
something hard to get rid of. It offers so many features, especially when visiting a new
country/city. Now I finally found a solution.&lt;/p&gt;
&lt;p&gt;Here you go, my first blog post.&lt;/p&gt;
&lt;h2&gt;The features …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;I have been going on with my "degooglifying" efforts for a while now, however, Google Maps is
something hard to get rid of. It offers so many features, especially when visiting a new
country/city. Now I finally found a solution.&lt;/p&gt;
&lt;p&gt;Here you go, my first blog post.&lt;/p&gt;
&lt;h2&gt;The features I want to have in the replacement&lt;/h2&gt;
&lt;p&gt;Just a handful of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Offline maps&lt;/li&gt;
&lt;li&gt;Walking / Cycling navigation&lt;/li&gt;
&lt;li&gt;Public transportation&lt;/li&gt;
&lt;li&gt;Address / POI search&lt;/li&gt;
&lt;li&gt;Optionally satellite imagery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all of these both on mobile and my desktop. Of course, you cannot find a solution that
truly replaces Google Maps; however, I found a solution which although consists of multiple
services, apps, and software and is better than Google Maps!&lt;/p&gt;
&lt;p&gt;I tried &lt;a href="https://maps.me/"&gt;Maps.ME&lt;/a&gt;, however, it's very simplistic and doesn't have all the features I wanted. What
especially hurts is the POI search; very difficult to use and get actual results.&lt;/p&gt;
&lt;h2&gt;Meet OsmAnd&lt;/h2&gt;
&lt;p&gt;First, check out &lt;a href="https://osmand.net/"&gt;OsmAnd&lt;/a&gt;'s website. As you can see, it has &lt;em&gt;plenty&lt;/em&gt; of features, probably more
than you need. And it's OpenSource; Get it on &lt;a href="https://f-droid.org/en/packages/net.osmand.plus/"&gt;F-Droid&lt;/a&gt;, &lt;a href="https://play.google.com/store/apps/details?id=net.osmand.plus"&gt;Google Play&lt;/a&gt; or &lt;a href="https://apps.apple.com/app/apple-store/id934850257"&gt;App Store&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;OsmAnd ❤️ Wikipedia&lt;/h3&gt;
&lt;p&gt;Besides it has all the features I wanted, the best of all I loved is that it can place Wikipedia
"articles" on the map. For a geek traveler, who wants to know a lot of &lt;em&gt;facts&lt;/em&gt; about a given
place, building, square, region, whatever, I don't know how I could live without this before...&lt;/p&gt;
&lt;p&gt;&lt;img class="image-process-article-image" alt="OsmAnd-wikipedia" src="https://kmarc.github.io/pictures/osmand-wikipedia.png"/&gt;&lt;/p&gt;
&lt;p&gt;On the screenshot, the orange circles with a white &lt;code&gt;W&lt;/code&gt; in them represent Wikipedia articles that
were geo-tagged; Clicking on them, a popup opens and you can read the (offline, cached) Wikipedia
article; in this case, about the &lt;a href="https://en.wikipedia.org/wiki/Wat_Manorom"&gt;Manorom Buddhist Temple&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;OsmAnd ❤️ Wikivoyage&lt;/h3&gt;
&lt;p&gt;Okay, now this is the big deal here. For a year now, I am not buying yet another travel book when I
go somewhere; This time I bought &lt;a href="https://www.amazon.com/Lonely-Planet-Laos-Travel-Guide-ebook/dp/B06ZZQ8MW7"&gt;Lonely Planet on Kindle&lt;/a&gt;, but that's it. I try to use the
excellent &lt;a href="https://www.wikivoyage.org/"&gt;Wikivoyage&lt;/a&gt; and also contribute back to it. &lt;/p&gt;
&lt;p&gt;One  of Wikivoyage's  best  features is  that  the  listed "POI"s  are  put  on  a map  (see
&lt;a href="https://en.wikivoyage.org/wiki/Luang_Prabang#/maplink/1"&gt;example&lt;/a&gt;). What I did in the past, I printed this map and tried to use Google Maps / Maps.ME
together with the clumsy piece of A4 paper...&lt;/p&gt;
&lt;p&gt;&lt;img class="image-process-article-image" alt="OsmAnd-wikivoyage" src="https://kmarc.github.io/pictures/osmand-wikivoyage.png"/&gt;&lt;/p&gt;
&lt;p&gt;Well, guess what: OsmAnd can display the POIs from any given Wikivoyage article on an overlay; This
is the best feature so far, and a must-have for travelers. User experience-wise this is more
powerful and convenient than anything Lonely Planet can give you. The Wikivoyage articles are also
downloaded offline, so you can read it while roaming around without network connectivity.&lt;/p&gt;
&lt;h2&gt;Try it and... contribute!&lt;/h2&gt;
&lt;p&gt;I recommend trying out OsmAnd, it's life-changing. The UI is a bit... strange compared to any other
Android applications, and you can easily get lost in the settings / galore of features. However, at
the same time, it's refreshing. Finally, a software that reminds me of the complex and feature-rich
applications from 15-20 years ago; something that is replaced long ago by dumb smartphone apps.&lt;/p&gt;
&lt;p&gt;The rendering of the map does not look fancy; sometimes I would say it's annoyingly flickering.
However, all the extra features balance it out and after all, these features make my life and
travel experience better, aren't they?&lt;/p&gt;
&lt;p&gt;OsmAnd also makes it super  easy to &lt;strong&gt;edit&lt;/strong&gt; the POIs, so if you find 5  minutes in a coffee shop to
check out  opening hours, phone  numbers, the cuisine  of the bars  and restaurants around,  you can
easily contribute back to the community by editing the POIs.&lt;/p&gt;
&lt;p&gt;Also the Wikipedia overlay is only available in the paid version; We are only talking about a couple
dollars per month.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;On the smartphone, OsmAnd is a  very good replacement for Google Maps. I expect  it will get even better
in the  future. I  also got  seriously hooked  on OpenStreetMap  now, even  started editing  the map
itself, it's very rewarding, can recommend to everyone!&lt;/p&gt;</content><category term="blog"></category><category term="openstreetmap"></category><category term="degooglify"></category></entry></feed>